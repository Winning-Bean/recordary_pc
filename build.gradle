buildscript {
    ext {
        springBootVersion = '2.1.9.RELEASE'
        mooworkVersion = '1.2.0'
    }
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("com.moowork.gradle:gradle-node-plugin:${mooworkVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.moowork.node'

group 'com.fairy_pitt'
version '1.0.1-SNAPSHOT-' + new Date().format("yyyyMMddHHmmss")

mainClassName = 'com.fairy_pitt.recordary.RecordaryApplication'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/libs-milestone'}
    jcenter()
}

test {
    useJUnitPlatform()
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-websocket')
    implementation('org.springframework.boot:spring-boot-starter-thymeleaf')
    implementation('org.springframework.boot:spring-boot-starter-jdbc')
    implementation('org.projectlombok:lombok')
    implementation('org.springframework.boot:spring-boot-configuration-processor')
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation('com.h2database:h2:1.4.199')
    implementation('mysql:mysql-connector-java')
    implementation('org.springframework.session:spring-session-jdbc')
    implementation('org.springframework.boot:spring-boot-devtools')
    implementation('org.json:json:20180813')
    implementation('joda-time:joda-time:2.2')
    implementation('org.springframework.cloud:spring-cloud-starter-aws:2.2.1.RELEASE')
    implementation('org.springframework.cloud:spring-cloud-aws:2.2.1.RELEASE')
    implementation('com.amazonaws:aws-java-sdk:1.2.1')
    implementation('com.amazonaws:aws-java-sdk-s3')
    implementation('commons-fileupload:commons-fileupload:1.4')
    implementation('org.apache.commons:commons-io')

    annotationProcessor ('org.projectlombok:lombok')
    annotationProcessor ('org.springframework.boot:spring-boot-configuration-processor')

    testImplementation('org.junit.jupiter:junit-jupiter-api:5.2.0')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('org.projectlombok:lombok')
    testImplementation('org.springframework.boot:spring-boot-configuration-processor')
    testImplementation('org.hamcrest:hamcrest:2.1')
    testImplementation('io.findify:s3mock_2.12:0.2.5')

    testAnnotationProcessor ('org.projectlombok:lombok')
    testAnnotationProcessor ('org.springframework.boot:spring-boot-configuration-processor')

    testCompileOnly ('junit:junit:4.12')

    testRuntimeOnly ('org.junit.jupiter:junit-jupiter-engine:5.2.0')
    testRuntimeOnly ('org.junit.vintage:junit-vintage-engine:5.2.0')
}

def webappDir = "$projectDir/frontend"

task appNpmInstall(type: NpmTask) {
    workingDir = file("${webappDir}")
    args = ['install']
}

task npmBuild(type: NpmTask) {
    workingDir = file("${webappDir}")
    args = ['run', 'build']
}

task copyWebApp(type: Copy) {
    from 'frontend/build'
    into 'build/resources/main/static/.'
}

npmBuild.dependsOn("appNpmInstall")
copyWebApp.dependsOn("npmBuild")
compileJava.dependsOn("copyWebApp")
